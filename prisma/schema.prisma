// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  settings      Settings?
  otpCode       OtpCode?
  chatbots      Chatbot[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OtpCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  code      String
  expires   DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  defaultAIModel    String?
  openaiApiKey      String?
  anthropicApiKey   String?
  googleApiKey      String?
  deepseekApiKey    String?
  phone             String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chatbot {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  welcomeMessage String           @default("Hello! How can I help you today?")
  logoUrl        String?
  colorScheme    String           @default("#4F46E5")
  widgetPosition String           @default("bottom-right")
  apiKey         String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingSources TrainingSource[]
  embeddings     Embedding[]
}

model TrainingSource {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  type             String      // "website" or "pdf"
  url              String?
  filename         String?
  status           String      @default("pending") // pending, processing, completed, failed
  progress         Int         @default(0)
  extractedContent String?     @db.String  // Store the extracted content from websites or PDFs
  extractedUrls    String[]    // Store all URLs that were crawled from the website
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  chatbotId        String      @db.ObjectId
  chatbot          Chatbot     @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  embeddings       Embedding[]
}

model Embedding {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  vector           Float[]        // The embedding vector
  content          String         @db.String // The text content that was embedded
  trainingSourceId String         @db.ObjectId
  trainingSource   TrainingSource @relation(fields: [trainingSourceId], references: [id], onDelete: Cascade)
  chatbotId        String         @db.ObjectId
  chatbot          Chatbot        @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  sourceType       String         // "website" or "pdf"
  filename         String?
  url              String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}